pipeline {
    agent any

      parameters {
        booleanParam(name: 'RUN_TERRAFORM', defaultValue: true, description: 'Run Terraform steps')
    }

    environment {
        ARM_CLIENT_ID       = credentials('ARM_CLIENT_ID')
        ARM_CLIENT_SECRET   = credentials('ARM_CLIENT_SECRET')
        ARM_SUBSCRIPTION_ID = credentials('ARM_SUBSCRIPTION_ID')
        ARM_TENANT_ID       = credentials('ARM_TENANT_ID')
        container_key       = credentials('container_key')
        VM_PASSWORD         = credentials('VM_PASSWORD')
        VM_USERNAME         = credentials('VM_USERNAME')
        ARM_OBJECT_ID       = credentials('ARM_OBJECT_ID')

       
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/Akshitg43/mark_proj_1.git'
            }
        }
        stage('Terraform Init') {
            when {
                expression { return params.RUN_TERRAFORM }
            }
            steps {
                sh '''
                  

                    terraform init
                   
                      
                '''
            }
        }

  
        
      

       
        stage('Terraform Plan') {
            when {
                expression { return params.RUN_TERRAFORM }
            }
            steps {
                sh '''
                    

                    terraform plan -input=false \
                        -var="tenant_id=$ARM_TENANT_ID" \
                        -var="admin_password=$VM_PASSWORD" \
                        -var="admin_username=$VM_USERNAME" \
                        -var="vm_password=$VM_PASSWORD" \
                        -var="secret_value=$VM_PASSWORD" \
                        -var="key_vault_id=$KEY_VAULT_ID" \
                        -var="object_id=$ARM_OBJECT_ID"

                '''
            }
        }
        stage('Terraform Apply') {
            when {
                expression { return params.RUN_TERRAFORM }
            }
            steps {
                sh '''
                

                    terraform apply -auto-approve \
                        -var="tenant_id=$ARM_TENANT_ID" \
                        -var="admin_password=$VM_PASSWORD" \
                        -var="admin_username=$VM_USERNAME" \
                        -var="vm_password=$VM_PASSWORD" \
                        -var="secret_value=$VM_PASSWORD" \
                        -var="key_vault_id=$KEY_VAULT_ID"\
                        -var="object_id=$ARM_OBJECT_ID"

                    
                '''
            }
        }
        stage('Build Java App with Maven') {
            steps {
                 
                dir('java-app') {
                sh 'mvn clean package'
            }
        }
    }

    stage('deploy to vm') {
        steps {
            script {
                def vm_ip = sh(script: "terraform output -raw vm_public_ip", returnStdout: true).trim()

                sh """
                sshpass -p '$VM_PASSWORD' ssh -o STRICTHOSTKEYCHECKING=no $VM_USERNAME@${vm_ip} '
                sudo apt-get update -y &&
                sudo apt-get insatell -y openjdk-21-jre '

                 sshpass -p '$VM_PASSWORD' scp -o StrictHostKeyChecking=no \
                    java-app/target/*.jar $VM_USERNAME@${vm_ip}:/home/$VM_USERNAME/

                sshpass -p '$VM_PASSWORD' ssh -o StrictHostKeyChecking=no $VM_USERNAME@${vm_ip} '
                  nohup java -jar /home/$VM_USERNAME/*.jar > app.log 2>&1 &
                """
            }
        }
    }   
}
}

